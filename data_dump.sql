

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgtap" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."convert_metric_value"("p_value" numeric, "p_from_unit" "text", "p_to_unit" "text", "p_unit_type" "text") RETURNS numeric
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- If units are the same, no conversion needed
  IF p_from_unit = p_to_unit THEN
    RETURN p_value;
  END IF;

  -- Handle each unit type conversion
  IF p_unit_type = 'weight' THEN
    IF p_from_unit = 'metric' AND p_to_unit = 'imperial' THEN
      -- kg to lb (multiply by 2.20462)
      RETURN p_value * 2.20462;
    ELSIF p_from_unit = 'imperial' AND p_to_unit = 'metric' THEN
      -- lb to kg (divide by 2.20462)
      RETURN p_value / 2.20462;
    END IF;
  ELSIF p_unit_type = 'distance' THEN
    IF p_from_unit = 'metric' AND p_to_unit = 'imperial' THEN
      -- km to miles (multiply by 0.621371)
      RETURN p_value * 0.621371;
    ELSIF p_from_unit = 'imperial' AND p_to_unit = 'metric' THEN
      -- miles to km (divide by 0.621371)
      RETURN p_value / 0.621371;
    END IF;
  ELSIF p_unit_type = 'length' THEN
    IF p_from_unit = 'metric' AND p_to_unit = 'imperial' THEN
      -- cm to inches (multiply by 0.393701)
      RETURN p_value * 0.393701;
    ELSIF p_from_unit = 'imperial' AND p_to_unit = 'metric' THEN
      -- inches to cm (divide by 0.393701)
      RETURN p_value / 0.393701;
    END IF;
  END IF;
  
  -- If we reach here, either the unit_type is not convertible (percentage, count)
  -- or something went wrong, so return the original value
  RETURN p_value;
END;
$$;


ALTER FUNCTION "public"."convert_metric_value"("p_value" numeric, "p_from_unit" "text", "p_to_unit" "text", "p_unit_type" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_unit_display"("p_unit_type" "text", "p_unit_preference" "text") RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF p_unit_type = 'weight' THEN
    RETURN CASE WHEN p_unit_preference = 'metric' THEN 'kg' ELSE 'lb' END;
  ELSIF p_unit_type = 'distance' THEN
    RETURN CASE WHEN p_unit_preference = 'metric' THEN 'km' ELSE 'miles' END;
  ELSIF p_unit_type = 'length' THEN
    RETURN CASE WHEN p_unit_preference = 'metric' THEN 'cm' ELSE 'inch' END;
  ELSIF p_unit_type = 'percentage' THEN
    RETURN '%';
  ELSIF p_unit_type = 'count' THEN
    RETURN '';
  ELSE
    RETURN '';
  END IF;
END;
$$;


ALTER FUNCTION "public"."get_unit_display"("p_unit_type" "text", "p_unit_preference" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."client_metric_preferences" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" "uuid" NOT NULL,
    "metric_id" "uuid" NOT NULL,
    "display_order" integer DEFAULT 0 NOT NULL,
    "is_visible" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."client_metric_preferences" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."client_metrics" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" "uuid" NOT NULL,
    "metric_id" "uuid" NOT NULL,
    "value" numeric NOT NULL,
    "recorded_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "notes" "text",
    "unit_system" "text" DEFAULT 'metric'::"text" NOT NULL,
    "recorded_by_id" "uuid",
    CONSTRAINT "client_metrics_unit_system_check" CHECK (("unit_system" = ANY (ARRAY['metric'::"text", 'imperial'::"text"])))
);


ALTER TABLE "public"."client_metrics" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."clients" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "email" "text" NOT NULL,
    "client_type" "text" NOT NULL,
    "assigned_to" "text",
    "user_id" "uuid" NOT NULL,
    "phone" "text",
    "company" "text",
    "address" "text",
    "notes" "text",
    "status" "text" DEFAULT 'Pending'::"text" NOT NULL,
    "last_training_completion" integer,
    "last_training_30d_completion" integer,
    "last_task_completion" integer,
    "avatar_url" "text",
    CONSTRAINT "clients_client_type_check" CHECK (("client_type" = ANY (ARRAY['online'::"text", 'inPerson'::"text", 'hybrid'::"text"]))),
    CONSTRAINT "clients_status_check" CHECK (("status" = ANY (ARRAY['Connected'::"text", 'Pending'::"text", 'Offline'::"text", 'Archive'::"text"])))
);


ALTER TABLE "public"."clients" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."metric_definitions" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "unit" "text",
    "unit_type" "text" NOT NULL,
    "is_default" boolean DEFAULT false NOT NULL,
    "user_id" "uuid",
    CONSTRAINT "metric_definitions_unit_type_check" CHECK (("unit_type" = ANY (ARRAY['weight'::"text", 'distance'::"text", 'length'::"text", 'percentage'::"text", 'count'::"text", 'other'::"text"])))
);


ALTER TABLE "public"."metric_definitions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_preferences" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "weight_unit" "text" DEFAULT 'metric'::"text" NOT NULL,
    "distance_unit" "text" DEFAULT 'metric'::"text" NOT NULL,
    "length_unit" "text" DEFAULT 'metric'::"text" NOT NULL
);


ALTER TABLE "public"."user_preferences" OWNER TO "postgres";


ALTER TABLE ONLY "public"."client_metric_preferences"
    ADD CONSTRAINT "client_metric_preferences_client_metric_key" UNIQUE ("client_id", "metric_id");



ALTER TABLE ONLY "public"."client_metric_preferences"
    ADD CONSTRAINT "client_metric_preferences_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."client_metrics"
    ADD CONSTRAINT "client_metrics_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."clients"
    ADD CONSTRAINT "clients_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."metric_definitions"
    ADD CONSTRAINT "metric_definitions_name_user_id_key" UNIQUE ("name", "user_id");



ALTER TABLE ONLY "public"."metric_definitions"
    ADD CONSTRAINT "metric_definitions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_preferences"
    ADD CONSTRAINT "user_preferences_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_preferences"
    ADD CONSTRAINT "user_preferences_user_id_key" UNIQUE ("user_id");



CREATE INDEX "client_metrics_client_id_idx" ON "public"."client_metrics" USING "btree" ("client_id");



CREATE INDEX "client_metrics_metric_id_idx" ON "public"."client_metrics" USING "btree" ("metric_id");



CREATE INDEX "client_metrics_recorded_at_idx" ON "public"."client_metrics" USING "btree" ("recorded_at");



CREATE INDEX "clients_user_id_idx" ON "public"."clients" USING "btree" ("user_id");



CREATE INDEX "idx_client_metric_preferences_client_id" ON "public"."client_metric_preferences" USING "btree" ("client_id");



CREATE INDEX "idx_client_metric_preferences_display_order" ON "public"."client_metric_preferences" USING "btree" ("display_order");



CREATE OR REPLACE TRIGGER "update_client_metric_preferences_updated_at" BEFORE UPDATE ON "public"."client_metric_preferences" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "update_client_metrics_updated_at" BEFORE UPDATE ON "public"."client_metrics" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "update_clients_updated_at" BEFORE UPDATE ON "public"."clients" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "update_metric_definitions_updated_at" BEFORE UPDATE ON "public"."metric_definitions" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "update_user_preferences_updated_at" BEFORE UPDATE ON "public"."user_preferences" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."client_metric_preferences"
    ADD CONSTRAINT "client_metric_preferences_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."client_metric_preferences"
    ADD CONSTRAINT "client_metric_preferences_metric_id_fkey" FOREIGN KEY ("metric_id") REFERENCES "public"."metric_definitions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."client_metrics"
    ADD CONSTRAINT "client_metrics_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."client_metrics"
    ADD CONSTRAINT "client_metrics_metric_id_fkey" FOREIGN KEY ("metric_id") REFERENCES "public"."metric_definitions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."client_metrics"
    ADD CONSTRAINT "client_metrics_recorded_by_id_fkey" FOREIGN KEY ("recorded_by_id") REFERENCES "auth"."users"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."clients"
    ADD CONSTRAINT "clients_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."metric_definitions"
    ADD CONSTRAINT "metric_definitions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_preferences"
    ADD CONSTRAINT "user_preferences_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow managers to manage their clients' metrics" ON "public"."client_metric_preferences" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."clients"
  WHERE (("clients"."user_id" = "client_metric_preferences"."client_id") AND ("clients"."user_id" = "auth"."uid"())))));



CREATE POLICY "Allow users to manage their clients' metrics" ON "public"."client_metric_preferences" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."clients"
  WHERE (("clients"."user_id" = "client_metric_preferences"."client_id") AND ("clients"."user_id" = "auth"."uid"())))));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































GRANT ALL ON FUNCTION "public"."convert_metric_value"("p_value" numeric, "p_from_unit" "text", "p_to_unit" "text", "p_unit_type" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."convert_metric_value"("p_value" numeric, "p_from_unit" "text", "p_to_unit" "text", "p_unit_type" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."convert_metric_value"("p_value" numeric, "p_from_unit" "text", "p_to_unit" "text", "p_unit_type" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."get_unit_display"("p_unit_type" "text", "p_unit_preference" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."get_unit_display"("p_unit_type" "text", "p_unit_preference" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_unit_display"("p_unit_type" "text", "p_unit_preference" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";
























GRANT ALL ON TABLE "public"."client_metric_preferences" TO "anon";
GRANT ALL ON TABLE "public"."client_metric_preferences" TO "authenticated";
GRANT ALL ON TABLE "public"."client_metric_preferences" TO "service_role";



GRANT ALL ON TABLE "public"."client_metrics" TO "anon";
GRANT ALL ON TABLE "public"."client_metrics" TO "authenticated";
GRANT ALL ON TABLE "public"."client_metrics" TO "service_role";



GRANT ALL ON TABLE "public"."clients" TO "anon";
GRANT ALL ON TABLE "public"."clients" TO "authenticated";
GRANT ALL ON TABLE "public"."clients" TO "service_role";



GRANT ALL ON TABLE "public"."metric_definitions" TO "anon";
GRANT ALL ON TABLE "public"."metric_definitions" TO "authenticated";
GRANT ALL ON TABLE "public"."metric_definitions" TO "service_role";



GRANT ALL ON TABLE "public"."user_preferences" TO "anon";
GRANT ALL ON TABLE "public"."user_preferences" TO "authenticated";
GRANT ALL ON TABLE "public"."user_preferences" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
